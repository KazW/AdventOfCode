<!-- livebook:{"persist_outputs":true} -->

# Advent of Code 2024

```elixir
day_1_part_1_puzzle_input = """
69214   60950
83241   49638
37930   31308
50722   94914
93164   82798
80918   72850
17490   79421
64372   87820
89659   98375
91555   95812
48924   93602
38031   64096
57853   20530
88521   43214
68331   14770
32767   19574
95030   92579
80448   10870
27268   86384
18742   65926
50258   95193
88830   17352
73007   82798
95145   42403
58976   17352
22476   68379
21785   17811
21560   90827
82909   37527
55371   69778
73607   32404
88276   44965
86274   46099
61163   63445
52231   27046
84647   20530
37515   57298
44394   99003
58258   74954
56060   34105
79808   73814
96748   51318
87301   46022
93991   44642
45674   96969
10870   49159
13175   23840
12881   86704
11425   89064
71044   92543
70247   88369
97814   73317
78003   44160
45779   14598
95915   46875
51055   99003
14500   19574
40956   23840
64791   99735
95406   51318
18800   72878
85004   33238
16723   31504
14333   69398
40419   10870
81499   79136
31696   24276
71897   55421
63928   46875
46875   33198
40086   76959
67622   29550
63819   88369
74694   35769
63615   20200
88828   58414
58917   20414
86066   24696
84677   47814
87339   89616
30182   36007
71811   63762
26364   18927
45435   54026
65473   83062
40764   12795
86131   19574
46984   71532
94658   36666
34864   85172
74271   85172
37126   63381
26701   91608
11846   99003
91698   44394
19986   17352
31279   82252
25542   10870
43023   98869
25001   25208
39137   44758
75796   94436
93491   42015
16837   69895
78167   59486
56738   17811
66303   49575
91100   33987
99100   41554
46126   41472
31826   20530
61208   20200
98875   49776
89960   23840
87445   88369
90701   59605
48604   24766
49830   60581
32422   32404
48321   49338
91545   51318
30591   23840
76791   25366
47653   64300
70447   10870
96337   10870
40822   99003
50985   36666
45600   58520
78539   21021
11792   39770
89999   23840
22229   24252
79514   31414
93645   99874
39916   12567
63722   87301
85209   12845
78460   94436
79669   33420
89396   36762
12518   91072
70992   20530
92482   51318
50977   39809
59666   93602
69358   24889
30774   85209
50495   88117
74843   68135
64043   93602
42690   14598
95474   99003
31999   10870
77935   30381
86471   46022
82671   23840
21996   17352
25301   68950
45903   49209
88433   15186
18897   13349
23742   38006
29440   44394
77679   19534
67503   19006
22862   87523
68125   36752
32102   85209
57298   32444
44985   10870
76984   88369
96974   44648
22496   17352
19906   88369
53085   69481
49762   39320
23508   13349
73366   19574
39420   85172
21487   20200
49538   31279
58985   33747
78834   86304
83207   77460
26624   39320
33276   87130
62119   15410
72488   72850
69108   46022
28383   64125
45283   60950
56242   88580
47120   46022
20917   12845
91088   67959
30625   92579
81302   98117
14883   22568
45215   46818
36185   72873
47369   19661
39320   48658
35775   60950
20573   66758
92168   46875
85925   23570
83017   28941
88673   62352
85790   46022
40389   17811
13925   14598
65265   98819
21058   70060
81605   36401
49669   63107
58410   60950
20993   32404
89320   36606
93679   89908
24396   66724
26960   82887
35749   98507
67814   60950
95966   99777
45832   90281
21396   69067
70924   77174
51921   31279
86430   41554
60703   76733
55109   86032
64568   34984
61181   39320
76019   80530
93405   35718
40732   73310
27676   56302
46615   12644
94412   32659
42651   46875
22911   88369
37891   61401
39505   19574
30551   99381
52001   99003
94890   77236
12845   10870
60037   99735
17811   93480
39461   52563
70835   99003
26239   32404
21199   53413
29427   61865
99745   52578
58368   85172
32844   17811
25356   61341
55087   39124
73711   94153
23878   15193
19011   15821
55522   76895
25442   85172
43553   23840
79059   51318
45546   85172
18253   46875
13486   98333
85621   78640
94812   14598
35976   22851
95446   35811
68679   86540
35048   32404
32404   58367
54639   82218
46890   99735
54797   64140
58043   28678
38310   78102
96824   19574
82010   90281
44558   88560
25947   55410
39754   90281
85172   77816
38409   72850
93847   79705
70670   31866
66466   72850
14378   85172
10594   82798
88488   36494
80919   90281
15539   60764
76757   20530
73014   80854
10103   28777
63011   51318
97931   72850
11511   23511
90999   46778
10581   17352
24639   84344
12573   87301
94628   73454
68709   60950
69611   36666
77840   32404
56046   43452
64975   36666
35086   27046
21044   63339
27003   32404
99990   41554
92558   76384
10676   51318
79869   34929
41478   23840
40010   17811
57724   13349
36886   20530
52799   39658
74618   28890
37677   39602
25056   19780
37249   60950
16420   21533
92579   91814
32467   76018
50446   40645
20800   27046
25367   93602
20200   50429
67153   82421
99387   85172
99003   99003
21079   68678
21496   45196
10244   85172
60317   96967
89792   64416
66971   28760
48409   49209
87836   13036
94588   25049
19574   80163
43975   90281
54578   22870
24412   17352
66935   85209
75103   46748
99675   13318
63283   86570
38622   17811
76156   12554
18868   31279
95097   28731
87940   25307
31588   20683
86721   51679
40662   60665
61441   46875
95742   96428
12500   48663
69704   83722
52150   52130
94648   71064
34905   72850
90241   81541
22820   88917
84893   82798
35291   13349
91607   69674
91250   89186
12934   76205
50355   10870
11918   93561
11981   87504
90011   97792
19160   99003
38536   95219
47433   72254
71173   20241
58871   49592
99297   46875
14256   36666
42700   92579
65952   26453
38344   17352
31939   66675
88319   31279
48532   69055
54160   37364
51367   98234
63774   67948
91398   52760
19606   98639
15722   27046
11670   27046
11752   90281
57229   24766
92900   82069
35472   17352
11762   10464
52327   51318
49806   24252
83152   27046
66672   11070
13349   20530
10860   67520
34902   74641
36500   14208
90699   24766
65392   68056
67360   23840
20770   12845
27579   17811
52424   20530
88044   70562
82234   32404
38116   23840
71095   60884
35234   10870
74397   36937
59605   79377
33516   82798
83961   17811
17934   81965
58619   60950
24784   46183
60415   32404
33999   62356
70899   42550
71992   61565
31607   48168
82993   27705
98377   72447
19236   97390
69248   97543
12305   39320
12750   72850
67143   47302
51085   13713
21283   84586
58438   20530
61450   84960
77223   87301
40730   18648
61388   92620
10697   95051
29817   46022
44526   85172
42126   23970
91131   24766
53762   23485
99711   24766
41168   12845
89661   97679
19509   87301
46491   87301
82876   90281
57530   99003
30070   12845
37182   33467
98660   94041
53088   49209
23056   33662
59488   88369
27659   76043
85486   46875
33558   87301
64995   54418
58406   20530
52353   12845
52674   84792
97158   41554
36966   65903
96617   15049
17881   23393
38135   27655
35640   10870
75976   78468
54361   85172
70827   74733
23840   16180
93190   51318
75051   18196
64409   85172
20040   48165
92938   97826
43465   51609
11298   78526
99421   92903
21674   62444
68613   17352
40038   68779
90984   49209
72223   99735
99618   84903
96274   37409
54840   85533
77678   96379
79087   33036
27866   23840
94127   87366
83829   46731
21118   27046
54767   58444
31592   39320
84251   80340
16359   47980
33404   86692
30167   53720
54633   57298
64214   85172
65936   94436
26779   72257
56981   16995
88384   14598
16954   12845
19265   34877
20882   10870
24268   37193
73896   73107
17491   64788
34135   96478
97863   20530
33458   41554
87234   13349
17021   43950
43735   46022
41413   51318
23370   27518
40859   52659
20847   55643
78780   46875
89412   44659
44732   85942
15416   41554
20026   13573
20447   20530
92208   27046
22919   47883
19025   66716
78537   94436
21990   13835
57022   47578
23379   27046
10223   40352
70096   99003
27889   86884
73766   50077
17352   59737
18766   53132
85353   82798
16699   76756
18043   80464
67635   32404
89066   32404
96095   36666
80193   17352
83111   24567
82714   51318
15568   62699
46071   88369
24766   17393
24252   51318
90799   65043
45593   42548
42434   88369
76708   19788
44049   17352
26070   23840
89487   60950
75405   50409
61151   50949
55659   87976
97690   10769
23955   41554
51413   44394
93303   74623
88340   46875
36666   86119
68983   36666
97452   18100
77775   28288
93498   85175
35180   73788
88369   40289
60950   89290
80469   99735
44830   26094
56953   12845
14598   32404
48010   43254
51318   16119
70157   59605
29536   27046
97148   24766
88940   99003
94267   12845
80689   82798
51360   63373
22949   85172
61037   87301
12068   65294
29715   85209
90504   28648
31564   88812
33933   82995
29523   72320
77893   80865
55688   78887
24079   24766
13322   32095
89943   48334
29072   58704
53586   12845
23918   14598
56128   88548
66658   69626
10133   67845
99815   85172
68216   99003
46022   15395
83063   21232
62075   23840
53883   14598
66467   32404
47896   69944
71785   51318
84153   16006
29778   85209
31766   24766
16108   35318
45369   94436
40723   88485
65628   31279
22238   45332
91501   92579
17080   83343
27106   17811
52006   13517
10554   96843
42902   54855
78074   59112
76079   19574
66574   37842
30704   87301
61970   72591
75806   89415
65083   36666
44142   88369
89309   18398
14755   24252
31582   10397
71879   12845
50300   19574
55843   62837
70241   67656
13864   12845
56863   36666
28825   19574
93845   22897
20530   17811
44137   13349
47611   49209
76632   71061
96396   85003
21784   28828
10465   28473
76247   12845
90281   62295
68036   85383
98495   49331
66489   17352
73992   89989
27262   24766
46644   88369
27046   58715
68306   32404
56759   84611
59597   99003
35807   11412
81247   66456
28886   94970
93602   74875
28876   50501
83548   98501
42548   74927
17737   60997
39564   95234
38730   39320
15305   62977
64475   20570
88203   27046
49209   46875
58403   94223
33211   79621
12588   80687
38930   17322
57720   87301
70408   29585
35638   23840
97473   19574
79297   10870
82229   27046
86569   17352
25113   78295
16476   24791
75345   94436
15696   12845
24138   49905
82572   27046
88539   39320
59729   87301
20283   39331
31336   21205
93878   31692
69846   72850
54419   91006
82798   84255
49394   40818
69345   52987
39250   60950
26399   87538
32384   19159
97484   43143
63090   32208
76597   23840
14020   32404
62045   75497
18689   32404
52623   31279
52491   98683
87906   85172
82114   99003
26961   70112
17367   46022
98279   88369
71505   25937
19537   25375
21670   28451
56125   19574
60764   46875
77962   17811
91463   54069
47556   59029
83067   87301
55521   80404
51846   52594
34746   10952
41554   91631
87263   59965
22625   42548
44644   80377
66676   31212
10499   11321
70675   99003
40581   51732
87994   39961
94436   46875
97737   62666
79484   41644
53333   41554
42911   19574
37210   96788
12286   93469
86302   78835
89841   90378
79773   45455
91417   19811
61800   38053
23495   95310
31663   12652
26644   88369
46904   97345
26299   32404
81023   72850
20782   94436
48451   85172
42895   83143
53844   46875
49912   17811
86234   53747
98733   85172
90395   51318
87860   36666
62319   36666
81832   87028
96801   48785
34060   94915
19206   46022
61175   74300
38749   61982
35243   89642
94052   22838
68544   23840
38895   31279
13279   49209
47468   46826
94318   87301
71918   17811
86789   41554
83931   71452
71126   88369
16125   55867
39086   95213
16328   12845
71229   20530
79671   67001
91145   23840
53528   48955
23966   39867
36677   77019
77291   20530
32335   93201
94998   17586
16372   41181
99014   80727
61040   99055
93576   82718
92791   61735
79499   80967
71009   12845
16657   20530
75219   41824
49208   87301
65336   94436
39833   67725
39788   22450
15097   96722
13674   82562
35721   69206
46963   17811
90463   24766
78488   41554
78916   60727
59443   90281
43680   13349
36601   60950
41176   94271
43717   80804
37766   20530
82109   88369
17559   32947
28284   49209
22341   88369
31223   60082
39647   82580
64525   13349
29368   12845
98386   28932
64817   77829
46178   39365
95082   92579
70089   81861
72539   51350
11579   42548
63864   77114
13611   87301
71054   84124
49549   56474
98626   76586
21372   87832
42043   32404
51898   88369
29323   22433
64305   30520
70362   18267
26501   73191
10172   41554
19438   36666
17316   20200
13127   51318
11331   23840
37354   22773
34872   20249
48467   85209
36745   10870
97478   88369
29324   10246
24179   63888
24371   39320
61932   45220
55020   10320
64150   36160
68372   52644
10714   64027
68990   57768
72825   40811
85765   77880
32558   20200
78846   93936
71711   85172
90337   94436
32298   76808
86944   38430
36174   29108
53613   72165
79549   43129
43539   44170
61122   88369
30084   56992
49969   39320
38272   86708
11594   30429
69508   70293
21588   68766
97316   76575
97425   41520
62763   31254
63345   23840
43015   93602
52670   82798
58251   48255
33771   20530
12901   25496
42101   41554
43970   67658
90983   88369
33538   93514
89043   26380
65451   82798
73769   28981
78129   70224
84083   78572
72978   28610
81230   47914
97477   75916
96888   42548
24917   39320
97486   78173
13312   51318
27167   93602
76762   20600
72850   47594
24623   58718
99735   87301
92737   39670
33120   59605
63398   20200
38385   98299
81987   53969
62260   51318
67235   63713
85100   42047
27762   90281
13906   51318
85558   36666
42148   12845
88468   20200
92033   32404
39309   32404
99521   99391
80929   17352
28236   46875
83442   20530
50329   10870
75224   47197
71764   99003
22012   82219
89620   28881
60052   88379
98379   44694
47207   94436
47361   40762
96159   17352
61549   84760
36863   80773
28638   90281
28879   24766
24022   55460
25334   10870
25095   46875
14190   63285
66088   70993
36470   50008
47970   87301
35396   17811
24123   47037
26462   52299
49162   12845
88098   87301
53920   59862
84177   10870
18969   36666
55280   11340
14058   68145
13245   14598
23434   46622
56966   78829
77060   71967
25997   57796
41947   82348
52576   12845
91921   51318
"""

day_2_part_1_puzzle_input = """
11 12 15 18 19 18
84 86 88 89 92 92
18 19 21 23 24 25 29
56 59 60 61 63 66 73
11 13 15 13 15
36 38 36 39 42 43 40
21 22 23 21 21
35 37 38 39 37 41
56 58 55 57 58 60 61 68
77 78 80 80 83 85 88 89
79 81 82 82 83 80
89 90 91 91 91
69 71 73 73 76 78 82
2 4 5 8 8 13
60 63 67 70 72 73 74 75
15 16 18 22 19
18 21 25 28 31 31
58 61 65 66 67 71
50 53 56 58 61 63 67 74
51 54 56 58 59 62 67 70
78 81 82 84 90 89
62 64 65 71 73 73
68 71 76 79 81 85
23 25 30 32 34 36 37 44
68 66 67 69 72 73 76
52 51 54 56 59 58
26 24 25 27 29 31 32 32
80 78 80 83 85 89
4 1 2 5 8 10 17
11 8 9 10 9 12 13 14
32 30 29 30 31 28
89 87 84 87 89 90 91 91
50 47 44 45 49
11 9 10 9 12 14 16 21
35 33 34 37 37 38
29 27 30 30 27
23 22 22 23 25 28 31 31
88 87 90 93 94 94 98
18 15 17 17 18 20 22 29
46 45 47 49 53 55
55 52 54 58 55
73 71 73 75 78 82 85 85
54 51 53 56 59 63 67
37 36 39 42 46 47 52
56 53 60 63 66
76 73 78 79 78
61 58 59 66 67 68 69 69
42 41 44 47 48 50 55 59
53 50 57 58 65
10 10 11 13 16 18 21 24
14 14 16 19 20 21 18
93 93 95 98 98
86 86 87 89 93
35 35 37 39 41 43 45 52
15 15 17 18 20 17 20
77 77 76 79 80 82 80
43 43 42 45 45
81 81 80 81 84 86 90
76 76 78 80 82 80 82 88
86 86 89 89 91
25 25 28 28 30 27
93 93 94 95 95 95
2 2 2 5 9
57 57 58 61 61 67
45 45 49 51 52
3 3 6 10 12 14 11
50 50 52 53 57 60 60
67 67 69 71 75 76 80
12 12 14 18 20 25
67 67 68 75 77
44 44 49 51 48
41 41 47 50 52 52
56 56 59 66 70
9 9 11 14 20 27
41 45 47 48 50
52 56 59 60 63 65 68 67
19 23 24 26 28 31 31
62 66 69 70 71 72 76
20 24 27 28 29 35
30 34 35 34 37 39 41
5 9 7 8 7
34 38 37 39 42 42
10 14 17 18 20 19 20 24
62 66 68 71 73 70 73 78
78 82 83 83 86 87
60 64 65 67 68 68 66
63 67 70 71 71 71
60 64 66 66 70
21 25 28 28 33
29 33 36 40 43 46
74 78 80 84 87 86
40 44 45 49 52 52
37 41 45 48 52
33 37 40 44 46 47 52
9 13 19 20 21
61 65 67 73 74 75 78 75
72 76 77 83 84 84
65 69 71 76 77 81
47 51 58 59 60 65
18 25 26 29 31
70 75 76 78 80 82 79
45 50 53 54 56 57 59 59
79 86 88 90 94
14 19 21 23 29
47 52 54 57 54 57
50 57 58 60 63 60 61 60
24 29 30 29 31 33 33
12 18 19 20 18 21 25
56 62 60 63 65 67 69 76
8 14 14 15 16
50 56 56 59 56
81 86 86 87 89 89
29 34 36 36 40
43 49 49 50 51 56
74 81 82 83 84 86 90 92
35 42 43 44 48 46
69 74 77 79 83 83
30 35 39 40 42 46
42 47 48 50 54 56 63
65 71 77 78 80
15 20 21 27 25
27 32 34 39 39
65 72 78 80 81 82 84 88
49 54 57 62 65 66 73
99 98 97 95 93 91 92
22 21 20 19 16 15 13 13
63 60 58 56 53 50 47 43
29 28 25 22 17
42 41 40 39 42 41
92 89 90 87 85 88
26 24 23 25 25
69 68 66 64 67 63
67 66 67 66 61
67 66 66 64 62
65 63 63 60 61
78 77 75 72 72 72
14 12 9 8 8 4
77 74 74 71 70 64
93 91 89 85 84 83
77 76 74 72 70 69 65 67
61 58 54 53 50 48 47 47
30 27 25 24 20 16
23 20 18 16 13 9 4
44 42 39 38 35 34 27 24
22 20 17 15 10 13
25 22 19 12 10 10
29 28 27 24 19 15
43 41 34 32 30 27 22
92 93 92 89 86
39 42 41 39 37 35 33 35
88 91 89 86 84 82 82
18 21 19 17 15 12 10 6
88 89 87 85 83 80 78 73
98 99 97 98 97
23 24 21 22 20 18 19
59 60 57 59 58 58
25 27 25 26 22
47 49 47 44 46 41
32 34 34 33 31
90 92 89 89 86 88
98 99 97 95 93 93 90 90
14 17 16 16 15 14 12 8
84 87 84 84 83 76
36 37 36 32 31 30 29 27
63 65 61 58 57 56 55 58
15 18 16 14 10 8 8
92 94 91 90 88 84 80
91 93 90 86 84 82 76
58 59 57 56 51 48 46
69 71 65 62 60 57 58
93 95 94 92 90 83 83
45 46 44 41 36 35 31
48 49 46 44 38 31
96 96 95 94 93 92 90 87
54 54 53 50 48 49
40 40 39 38 38
57 57 56 54 52 51 50 46
44 44 43 40 37 36 33 28
19 19 16 13 11 9 10 8
43 43 46 43 41 43
92 92 89 88 87 89 89
14 14 13 15 11
62 62 64 62 61 54
56 56 55 53 51 48 48 46
72 72 71 69 69 70
70 70 68 68 68
73 73 71 71 70 68 66 62
70 70 70 68 61
14 14 11 7 4
49 49 47 43 45
39 39 36 32 30 27 25 25
26 26 25 24 20 16
25 25 21 18 16 11
28 28 27 24 21 19 12 11
18 18 13 11 10 9 11
40 40 33 31 29 26 26
37 37 35 29 27 23
81 81 78 71 65
72 68 66 65 64 61 60 59
66 62 59 57 56 58
25 21 19 17 14 11 10 10
47 43 41 40 36
41 37 34 31 29 22
11 7 6 7 4 3 2
76 72 69 71 68 66 64 67
78 74 71 74 72 72
62 58 57 58 54
74 70 71 69 66 63 57
49 45 45 43 41 38 37
32 28 27 25 23 23 26
26 22 19 19 19
86 82 81 81 77
23 19 18 18 11
38 34 32 30 27 25 21 18
63 59 55 52 53
24 20 17 16 15 11 8 8
18 14 11 10 6 2
60 56 55 53 49 42
75 71 64 63 60
33 29 27 22 25
38 34 29 28 27 25 24 24
27 23 16 13 11 7
82 78 77 74 69 64
54 48 45 42 41 39 36
99 92 90 89 87 86 89
78 73 71 70 69 66 65 65
53 46 44 42 39 35
51 44 41 39 36 34 27
24 19 18 19 16
27 20 18 21 19 21
39 34 33 35 35
55 50 51 49 47 43
26 20 19 22 19 12
34 28 27 27 26 24 23 20
78 71 70 68 65 65 68
60 54 51 51 51
89 83 83 82 80 78 74
28 22 20 20 15
17 10 9 5 3
24 19 16 15 13 9 10
43 37 33 31 30 28 27 27
23 16 13 10 6 2
87 80 77 73 71 70 63
27 21 15 13 10
24 19 14 12 9 12
54 48 45 38 38
63 58 53 51 47
30 23 20 17 12 5
72 74 76 79 77
90 91 94 95 96 98 98
44 45 47 48 49 51 55
71 72 75 76 79 85
26 28 31 34 33 34
2 5 6 3 1
9 10 11 8 10 10
63 64 66 64 67 71
68 69 72 75 77 80 77 84
47 48 48 49 52
76 79 81 83 83 80
55 58 59 59 60 63 63
6 8 8 11 12 15 17 21
15 16 17 17 19 22 25 31
40 43 45 49 51 53
82 84 85 86 88 92 89
63 65 66 67 70 74 74
29 31 33 34 36 40 44
69 71 72 76 78 83
76 79 82 87 88 89 90 92
70 73 76 77 84 85 88 85
10 13 15 16 17 24 24
47 48 50 55 58 60 62 66
1 3 5 6 8 13 20
47 45 48 49 52 53
65 63 64 66 68 69 70 68
51 50 51 53 55 55
41 40 41 44 48
63 61 62 63 64 67 73
9 8 6 8 10
71 70 71 72 69 66
60 59 61 62 64 66 65 65
89 87 89 88 92
96 93 91 92 97
77 74 77 80 80 83 86 87
64 63 66 68 68 69 70 69
23 22 25 27 27 27
15 13 16 16 17 21
85 82 82 83 85 86 91
7 4 8 10 12
65 64 65 69 67
3 1 5 8 9 11 13 13
83 81 85 86 90
81 78 80 84 86 89 92 98
50 49 52 53 59 62 64
70 67 70 73 78 75
42 41 44 45 52 54 56 56
50 48 49 54 58
41 40 42 43 49 52 53 58
46 46 49 51 53 54
85 85 87 88 85
2 2 3 6 8 9 11 11
71 71 74 77 79 80 84
78 78 80 83 84 90
53 53 56 58 61 64 61 64
86 86 85 88 91 89
62 62 59 61 64 64
45 45 46 49 52 51 53 57
55 55 56 58 57 62
83 83 86 86 89
58 58 58 61 59
86 86 89 91 93 94 94 94
63 63 63 65 66 68 72
19 19 21 22 23 26 26 31
5 5 6 10 11 14 15 16
33 33 35 39 42 43 41
27 27 29 30 31 35 38 38
31 31 35 36 40
61 61 62 64 67 71 77
49 49 52 53 58 59 61
58 58 61 63 68 66
23 23 26 31 34 37 37
7 7 9 12 17 21
36 36 39 46 53
71 75 76 77 80 83 86 89
59 63 66 69 71 68
32 36 37 38 41 44 47 47
70 74 75 77 81
78 82 83 86 89 96
64 68 70 68 71 72 75 78
35 39 41 42 43 41 44 42
87 91 92 93 94 97 95 95
38 42 41 44 48
48 52 51 53 59
29 33 36 39 39 40 41 42
80 84 85 86 86 84
11 15 16 19 19 19
64 68 68 70 72 73 77
2 6 8 8 9 10 17
33 37 40 42 46 49 52
72 76 78 82 83 85 83
41 45 47 51 53 53
62 66 70 71 74 78
30 34 36 39 43 48
65 69 71 78 79 82 85 87
5 9 14 15 14
34 38 43 46 47 50 50
75 79 84 87 91
68 72 75 80 87
81 88 90 92 94 96 97
61 68 70 72 75 78 79 78
85 90 92 95 96 96
31 37 39 42 43 47
1 7 9 11 12 18
38 45 47 45 47
76 83 82 85 88 85
88 94 96 94 94
1 8 10 7 8 11 12 16
46 51 52 51 52 57
31 37 40 43 44 47 47 49
36 42 42 43 45 42
35 42 43 43 46 47 49 49
53 60 60 62 64 66 70
4 11 11 13 18
82 89 93 96 97 99
32 38 40 41 42 46 47 46
74 79 80 84 87 89 90 90
35 40 44 47 51
77 83 85 89 94
6 12 19 21 22 25
67 72 73 80 82 83 85 84
31 36 37 43 46 49 50 50
1 6 7 8 14 17 21
5 11 13 19 22 25 28 35
57 54 52 49 48 50
23 22 19 17 15 12 10 10
12 11 9 8 4
48 45 44 41 40 37 35 30
63 61 62 61 60
57 55 53 55 57
59 58 56 59 59
46 44 46 43 42 40 38 34
40 39 38 36 38 33
67 64 64 61 58
54 53 53 50 47 48
96 95 95 94 94
30 29 27 24 24 20
77 74 74 73 68
73 71 67 64 61
39 37 34 30 28 26 29
24 23 21 17 15 15
68 67 63 60 59 55
31 29 28 25 23 19 18 13
57 54 53 46 44 43 40
48 46 39 36 38
85 82 77 74 74
93 92 90 89 86 79 75
55 52 50 48 47 42 36
78 79 76 75 74 73 72 69
63 64 62 61 60 62
33 34 33 31 29 29
59 61 60 59 55
70 71 70 67 66 63 57
39 42 41 40 37 39 37 35
9 11 10 7 9 6 7
60 63 60 59 60 60
66 69 66 68 64
80 83 80 83 82 80 75
38 41 41 40 38 37
42 43 43 40 37 34 37
64 65 65 63 63
35 38 36 33 32 29 29 25
11 13 11 11 10 9 4
90 92 88 85 83 80 78
41 42 39 35 32 31 28 29
95 98 94 92 90 89 86 86
14 17 14 10 8 4
55 57 55 53 49 48 45 39
86 87 82 81 79 76
76 78 75 74 67 70
87 89 83 81 81
45 48 43 40 36
87 90 88 87 80 75
12 12 11 8 7 4 3 2
20 20 17 14 17
88 88 85 82 80 77 75 75
12 12 11 8 4
38 38 35 34 32 29 26 19
98 98 99 97 95
99 99 97 98 95 93 91 92
23 23 20 18 17 20 20
72 72 71 74 72 68
87 87 88 87 84 79
85 85 84 81 81 80 79 78
71 71 68 67 67 69
88 88 85 82 82 82
56 56 53 50 50 46
98 98 95 93 93 88
40 40 36 34 32 29
49 49 46 42 40 38 39
82 82 79 76 72 71 71
40 40 36 35 32 28
89 89 85 84 78
37 37 31 30 27 24 23
9 9 8 2 5
98 98 93 91 89 89
57 57 56 50 46
54 54 51 45 40
72 68 65 62 59 56 55 54
91 87 85 83 81 79 81
31 27 25 24 22 20 20
37 33 30 27 25 22 20 16
22 18 17 16 9
46 42 41 40 38 35 37 36
66 62 60 57 55 57 59
76 72 70 71 70 68 68
80 76 74 73 75 73 71 67
64 60 57 60 57 54 53 46
87 83 82 82 79 78
23 19 17 16 16 15 16
35 31 31 30 28 25 24 24
44 40 40 38 36 32
21 17 14 14 11 10 9 3
93 89 87 86 82 79
57 53 49 46 44 45
56 52 51 47 46 44 44
80 76 74 71 67 63
49 45 41 38 31
69 65 63 56 55
25 21 19 17 10 9 7 8
82 78 72 71 68 66 66
65 61 55 52 51 50 46
19 15 14 8 7 1
88 83 80 78 77
82 75 74 73 75
28 22 19 18 15 12 12
51 44 41 40 37 35 31
93 87 84 83 80 79 78 72
93 87 84 83 81 83 81
60 54 51 49 46 43 46 49
58 53 52 53 51 51
84 79 78 81 78 77 73
25 20 19 22 20 18 16 10
76 69 67 67 65
28 23 21 21 18 21
44 39 39 36 34 32 30 30
39 33 30 27 27 24 20
86 79 79 78 75 68
22 17 16 14 10 8
78 71 70 67 63 61 64
47 42 41 40 36 34 34
42 36 33 30 26 23 19
71 65 61 59 52
76 69 66 63 57 55
83 76 74 72 65 64 63 65
34 29 28 22 20 20
60 54 53 47 43
53 47 46 44 38 35 33 26
24 24 25 25 26 29 36
46 50 51 54 56 55 55
37 33 30 28 24 21 23
46 44 41 38 35 31
33 32 30 27 21 18 17 20
32 35 35 38 41
45 45 49 52 55 58 57
73 75 74 68 66 64 66
59 55 53 51 48 48 48
74 71 69 67 65 65
60 63 64 64 66 70
88 85 84 85 88 90
44 41 39 38 36 32 31 31
62 66 69 70 76 78 76
8 10 13 15 16 13 12
80 80 77 73 72 69 68 63
61 60 57 51 51
35 32 33 34 37 39 45 47
27 24 24 22 21 21
78 71 69 71 71
43 38 35 31 28 27 24 20
2 6 9 11 15 18 24
75 75 78 75 78 79 83
81 77 76 69 62
1 2 3 7 9
33 37 40 43 46 49
35 31 28 27 29 27 24 26
75 73 70 70 63
99 93 91 89 86 88 86
77 73 70 70 68 67 63
73 77 79 81 83 87
86 83 86 89 94 94
66 72 75 77 80 77 77
45 41 41 40 34
80 83 84 81 78 75 71
31 26 24 24 22
25 24 22 20 18 20 19 12
51 52 51 54 53
77 81 82 85 86 91 94
22 27 30 31 32 34 37 37
32 36 37 40 43 41
93 90 87 86 84 81 80 78
61 64 66 69 71 74 76
12 9 8 7 5
19 17 15 12 9 6 4 3
69 68 65 63 62
86 87 90 91 92
72 70 69 66 63
89 88 86 85 84 82 79 76
33 35 38 39 41
74 73 70 68 66
54 53 52 49 48 47 44 42
65 63 61 59 56 53 51 50
47 46 45 44 41 39 38 35
97 95 92 89 86 84 83 81
33 36 38 41 44 45
11 13 14 17 20
47 46 45 42 41
57 54 52 50 48 46 44
80 82 85 86 89 92
5 6 7 9 10 13
48 50 53 55 57 58 61
27 26 23 21 18
64 63 61 60 57 54 53
31 30 29 28 26
94 93 90 88 86 85
8 9 10 11 13
10 8 7 4 3
74 71 68 67 64 61 60
65 63 60 58 57 56 54 52
91 89 88 85 83 80
39 41 44 45 46 49 51
18 19 22 24 25 27 30
92 89 87 84 82
52 55 57 58 60 62
29 32 35 38 40 42 44
60 59 56 54 52 49 47 45
56 55 53 51 49 47 44 42
11 12 15 18 20 21
29 28 26 25 23
31 32 34 37 40 43 45 48
17 20 22 23 26 29
78 75 72 71 70 67 65 62
40 41 44 46 47 48
42 39 37 35 33 30 29 28
40 42 44 45 46 49 50 51
32 29 27 24 23 20 17 15
17 15 13 10 8 7 6 4
66 67 68 70 73 76
18 20 21 23 24 25 28
84 81 79 76 73 72
31 29 27 25 23 20 17
47 45 43 40 39
72 74 75 77 80 81
79 82 83 84 85 86 87 89
18 16 15 14 12 10 9 8
97 95 94 91 88 85 83 82
86 87 88 89 92 95
64 62 61 59 58 55
29 32 35 36 37 39 41
78 77 74 71 69 68
58 56 55 52 50 49 46
45 48 51 52 53 54 57
15 18 20 23 24 25 28 30
88 90 92 94 96
43 40 39 37 35
61 64 67 69 72 75 78
43 41 38 36 35 32
25 28 31 32 34 35 37
55 56 59 62 64 65 67 68
70 72 73 74 77 79 81 83
53 51 49 46 45 44
80 82 85 88 90 93
92 91 88 85 84 82 81 78
67 65 64 62 59 56 54 51
56 53 52 50 49
82 83 86 88 89 90
46 44 43 41 39
22 19 17 16 13
57 55 53 51 49 48 47
88 87 84 83 82 79 78 75
71 73 76 78 81
12 15 16 19 20 21
16 13 12 11 8
49 47 45 43 42 41 39
66 67 69 70 72 75
22 21 20 18 15 12 9
72 75 77 80 81 82 84
3 4 6 7 8
68 67 64 62 60
31 29 26 24 22 21 20 17
29 30 32 35 37 40 43
32 29 26 24 23 21 20
66 65 64 63 61 60 58
60 58 56 55 54
43 45 47 50 52 53 55
14 12 9 6 3
39 40 41 44 45 48
73 71 69 68 65 63
49 48 47 44 43 40 37
50 49 48 46 45 44 41
38 39 40 43 44 46 47
78 75 73 71 70
47 49 52 55 57 58 60
55 52 50 49 46 45 43 42
89 88 85 82 80 77
94 91 89 86 83 82 79 76
40 37 36 35 33 30
76 77 80 81 83
82 80 78 77 74 73 72 70
34 32 30 29 27 25
36 38 39 40 43 46
26 23 21 20 17 14 13
69 66 64 63 62
65 68 70 71 73 74 77 78
57 56 53 50 49
42 40 38 35 33
5 7 8 11 14 15 17 18
57 55 54 52 49
99 96 95 93 90 87
37 39 41 42 45
30 33 34 36 38 39 40
29 27 26 23 20 18 15
74 73 71 69 66 63
79 76 73 72 70 67
66 69 72 73 75 77
80 81 83 84 87 89 92
23 26 29 31 33 34 37
70 68 65 62 60 58 57 56
30 28 26 25 22 21 18 17
40 39 36 33 32 30 29 27
80 82 85 88 89 90 93
90 87 86 83 82
19 17 16 14 13
16 18 21 23 26
48 50 51 54 56 58
1 3 6 9 10 11 13
11 13 15 16 18 19 21
78 75 72 69 66 65 64 61
41 39 36 34 32 30 29
62 59 58 55 53
81 80 78 76 74
91 89 86 85 84
26 27 30 33 34
93 92 89 86 83 82 81 78
56 54 52 50 49 46 43 41
50 52 53 56 58 61 62
74 71 69 67 66
18 21 23 24 26 27
68 71 72 74 75
83 80 79 77 76 75
63 61 59 56 54 53
9 11 13 16 19 20
44 41 39 38 36 33 30
72 74 76 79 82 85
20 19 16 13 11
84 86 89 91 92 93 96
76 73 71 69 66
68 66 64 62 59
63 61 58 57 56 55
39 40 42 44 47 50 53 55
55 54 53 52 50 47 44 41
30 31 32 34 36 37 39 42
21 24 25 27 28
28 25 24 22 21
49 46 43 40 38
90 89 88 85 82
32 35 37 39 42 45
32 33 35 38 40
96 95 93 90 87 85 84
4 7 9 11 12 14 15
70 72 75 76 77 79 82 84
82 81 80 79 76 75
45 44 43 40 38 37 35 34
10 12 13 16 17 18
46 47 50 53 56 58 61 62
34 36 39 41 43 44
25 24 22 19 18 16
14 12 10 7 6
5 8 9 10 11 13 16
1 3 6 7 8 10 11
10 12 13 16 18
79 77 74 73 72
38 35 32 29 28
17 16 13 11 9 7
76 74 71 69 67 64 61
75 76 77 79 80
20 17 15 13 11 10 7
16 13 10 8 6 5 3
69 68 67 65 63 60
34 37 40 42 43
80 77 75 74 73 72 71 70
92 91 90 87 86 83 82
86 87 89 90 92 95
60 61 63 66 68 70 71 73
11 9 8 7 5
92 89 86 83 81 80 79
79 81 82 84 85 86
87 90 92 94 97 99
50 51 52 55 58 60 62
3 4 7 9 11 13 14
94 92 91 88 87
83 81 79 76 74 71
67 70 73 74 77 78 81 82
21 23 26 27 30 31
78 80 83 86 87 90 92 95
49 47 44 41 38 37
59 60 62 64 67 70 72 75
80 77 76 73 71 68 67 65
82 84 86 88 91 94 97 99
72 69 67 64 63 60 57
28 31 32 35 36
23 21 20 19 16 13 12 9
26 24 21 18 16 15 14
28 25 24 22 20 19 18 15
99 97 94 91 88
64 66 67 69 70 73 76 79
61 59 57 56 54 52 50 47
48 50 53 56 59 62 63 64
79 78 76 74 71 69 67 64
44 47 48 50 51 53
75 74 73 72 70 69 66
17 15 12 9 7
5 7 10 13 15 16 19 22
3 6 7 9 11 14 15
62 63 64 67 69 72 73 74
15 13 12 10 8
41 43 46 48 50 51
73 71 70 67 66 64 61 59
80 79 76 73 72 69 67 66
56 58 60 62 64 66
29 31 32 34 37
49 47 46 43 41 40
18 15 14 11 9 8
46 48 51 52 54 57
47 45 43 41 38 35 32 30
14 15 17 20 23 26 28 31
18 15 13 10 8 5
79 78 75 73 72 71 68 65
71 72 74 76 78 81
59 57 55 54 52 49
56 53 51 48 46 45 43 40
30 29 27 24 23
75 74 72 70 68 67
18 17 16 14 11
77 80 82 83 84
79 81 83 85 88
40 39 36 33 31
61 63 65 68 69 72 74
31 28 26 23 20 18 16
46 47 48 50 53
27 25 23 22 21 19 16 14
8 11 13 14 17 19 21
34 31 28 26 23 20 17
55 53 51 48 45
33 30 29 27 24 21 18
42 45 48 51 52
38 36 35 33 31 29 27
11 14 17 20 22 25 28 30
14 16 17 18 21 24
74 71 70 69 67 65 64
53 52 49 48 47 44 42 41
77 76 73 71 70 68 65
79 82 83 84 86 88 91
78 75 72 70 69 67 64 62
14 11 9 8 5
52 55 56 58 61 63 64
29 32 33 35 38 39
25 28 31 34 36 39 41 42
3 5 7 8 10 12 15 18
73 70 67 66 64
86 87 90 91 92 94 95
68 69 72 75 77
71 72 75 78 81 84 87 89
40 43 45 47 50 51 52
95 92 91 90 89 88
27 30 32 34 35
46 44 42 39 37 34 33
65 62 61 60 57 56
53 55 57 58 60 63 65 68
68 70 73 74 75
33 35 36 39 41 44 47
35 33 30 28 26
47 49 52 54 55 57 58
29 30 32 35 38 39 40
23 26 29 31 34 35 36
68 65 62 61 58
29 28 27 26 23 20 18
9 12 14 16 19
45 43 41 38 35 32 29 26
76 78 80 83 84
57 59 62 64 67 70 73
38 39 41 44 46 48 50
45 47 50 51 52 53 56
18 15 12 11 9 7 5
96 94 92 89 88
22 21 19 17 15 12 10 7
86 84 83 82 81
11 12 15 18 19 22
83 85 87 89 91 92
44 43 42 40 37 34 31 28
82 81 80 78 75 73 71
66 68 69 71 74 76 78 81
36 34 32 29 27 24
60 59 56 53 51 49
96 94 92 89 87 84 82
98 96 94 92 91 88 85
97 96 94 92 90 89
65 68 71 73 74 77 78
69 66 65 64 62
6 7 10 12 13 16 19
60 57 55 53 52 50
7 9 12 15 18 19 22
1 4 7 8 9
29 30 32 35 36 38 41 44
34 32 31 29 28 27
85 82 79 77 75 74 72
18 16 15 13 12 9
30 29 27 25 22 21 19 18
82 83 85 88 89
48 51 53 56 59 62 64
48 47 45 43 42 40 37 35
23 24 26 27 30
37 38 40 42 43 44 45
24 25 28 29 32 33 34 35
84 81 78 77 74 72 71
45 42 40 39 38 35 33 32
24 25 26 28 30
31 29 27 25 24 21 20
74 73 71 70 68 67 65
35 36 37 39 41 43 45 47
96 95 94 91 89 88
54 51 50 49 48
63 66 69 70 73 76
76 77 80 81 82
55 54 52 51 50
27 30 31 33 35 37 38
10 9 7 5 3 1
91 88 87 86 84 83 80 78
82 84 86 88 89 92 94 96
58 57 55 53 50
25 26 28 29 30
83 85 88 89 90 91
92 91 89 87 86 85 82
40 43 45 46 49
80 77 76 73 70
23 20 18 16 15 12
78 75 74 72 71 69
74 76 78 81 83 86 87 90
41 43 46 49 51 53 55
42 43 44 46 47 49 51 53
24 21 18 15 12 9 8 6
82 85 87 89 92 94
44 47 50 52 53 54 57
89 87 85 83 81 80 77
20 19 18 17 16 14 13
45 43 41 40 38 35 32 29
27 25 24 21 20 17 15 12
84 86 88 89 90 92 94 97
65 62 59 57 56
51 48 46 43 42 39
22 23 25 26 28
71 74 77 78 81
50 47 45 44 41 39 38
52 50 47 45 44 42
53 52 51 49 46
34 33 32 29 26 24
5 8 10 13 16 18 21
43 44 47 50 51 54 55 58
94 92 91 90 89
94 93 90 89 88 86
25 24 23 22 21
84 86 89 92 95 96
11 10 8 5 3
63 60 59 56 53 51 50 48
56 55 53 52 49 47 44
67 68 71 72 75 78 79 82
31 32 34 37 40 41 43
51 53 54 57 60 63
51 52 53 55 56 59
33 32 30 29 28
70 72 75 76 78 81 84
47 48 51 53 54 56 58
15 13 10 9 6 4
37 36 35 32 30 28
50 49 46 45 42 40 38
54 53 52 49 48
96 94 92 89 87
35 34 33 30 28
24 22 19 16 13 10
83 81 78 77 75 74 71
43 42 41 39 36 33 31 30
61 63 65 68 69 71 74 76
89 90 91 92 94 96 98
5 8 9 12 15 16 18
47 48 51 52 54 57
35 37 40 43 44 46
12 9 7 5 3 2
28 31 34 36 38 40 41
96 94 92 91 90 87 85
63 66 67 68 69 71 73 74
59 57 55 52 50 48
15 16 18 21 24 26 27
12 10 9 7 4
35 34 31 28 25 22 20
34 32 29 28 25 22 21 18
57 59 60 62 63 64
53 51 49 46 43 41 38 36
44 42 40 39 36 34 31
61 62 64 67 68
89 91 93 94 96 98
61 64 66 67 69 70 73
15 17 19 21 22
60 58 57 56 54 53
16 13 12 10 9 7 6
1 4 7 10 11
91 89 86 84 81
54 56 59 61 63 65 66 69
81 78 75 74 71
36 39 40 42 44 46 47
43 41 39 37 36 35 34
60 63 66 68 70 71 73
83 84 86 87 90 92
54 57 60 62 63
99 98 96 95 94
31 32 34 37 38
95 93 92 89 88 87
69 67 64 63 61
23 21 18 15 13 11 8 7
50 53 54 55 58 61 64
59 61 64 66 68
39 36 35 32 29
72 70 68 65 64 61
64 62 61 58 56 55
14 13 12 9 7
72 69 68 67 64 63 60
47 49 52 54 57 60 62 63
79 81 83 84 85
51 53 55 57 60 62 63 64
70 73 75 78 81
19 17 16 14 11 10
69 66 65 62 59
51 49 48 47 46 45
31 32 33 36 38
14 16 18 21 24
84 85 87 89 90 92 93 95
51 48 45 44 41 38 37
48 49 51 53 55 58
30 29 27 25 23 21
34 35 38 39 41 43 44
61 62 63 64 67 69 70
26 28 30 32 34
50 52 54 56 59 61 64
14 11 10 8 6 3
29 31 33 36 38 39
40 37 36 35 32 31 30 28
84 82 79 78 75 74 71 68
3 5 8 11 12 14
59 58 56 55 53 52 49 47
81 78 77 74 71 68 65
40 43 44 46 48 49 52
76 79 81 83 86 89 91
69 68 67 65 63
3 6 8 11 14 17 19 20
"""
```

## Day 1

### Part 1: Historian Hysteria

The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.

As each location is checked, they will mark it on their list with a star. They figure the Chief Historian **must** be in one of the first fifty places they'll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

You haven't even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently **empty**. Eventually, someone decides that the best place to check first would be the Chief Historian's office.

Upon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?

Throughout the Chief's office, the historically significant locations are listed not by name but by a unique number called the **location ID**. To make sure they don't miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.

There's just one problem: by holding the two lists up **side by side** (your puzzle input), it quickly becomes clear that the lists aren't very similar. Maybe you can help The Historians reconcile their lists?

For example:

```
3   4
4   3
2   5
1   3
3   9
3   3
```

Maybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the *smallest number in the left list* with the **smallest number in the right list**, then the **second-smallest left number** with the **second-smallest right number**, and so on.

Within each pair, figure out **how far apart** the two numbers are; you'll need to **add up all of those distances**. For example, if you pair up a `3` from the left list with a `7` from the right list, the distance apart is `4`; if you pair up a `9` with a `3`, the distance apart is `6`.

In the example list above, the pairs and distances would be as follows:

* The smallest number in the left list is `1`, and the smallest number in the right list is `3`. The distance between them is `2`.
* The second-smallest number in the left list is `2`, and the second-smallest number in the right list is another `3`. The distance between them is `1`.
* The third-smallest number in both lists is `3`, so the distance between them is `0`.
* The next numbers to pair up are `3` and `4`, a distance of `1`.
* The fifth-smallest numbers in each list are `3` and `5`, a distance of `2`.
* Finally, the largest number in the left list is `4`, while the largest number in the right list is `9`; these are a distance `5` apart.

To find the **total distance** between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is `2 + 1 + 0 + 1 + 2 + 5`, a total distance of `11`!

**Your actual left and right lists contain many location IDs. What is the total distance between your lists?**

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Day1 do
  @line_splitter "\n"
  @pair_splitter "   "
  @empty ""

  @spec get_distance(lists :: binary) :: distance :: non_neg_integer()
  def get_distance(lists)
    when is_binary(lists),
    do:
      lists
      |> parse()
      |> sort_lists(:asc)
      |> zip_lists()
      |> get_distances()
      |> Enum.sum()

  @spec get_similarity(lists :: binary) :: similarity :: non_neg_integer()
  def get_similarity(lists)
    when is_binary(lists),
    do:
      lists
      |> parse()
      |> get_similarities()
      |> Enum.sum()

  @spec parse(lists :: binary) :: {left :: [non_neg_integer()], right :: [non_neg_integer()]}
  def parse(lists)
    when is_binary(lists),
    do:
      lists
      |> String.split(@line_splitter)
      |> Enum.reject(&is_empty/1)
      |> Enum.map(&parse_pair/1)
      |> Enum.reduce({[], []}, &build_lists/2)
      |> reverse_lists()

  defp is_empty(line),
    do: line == @empty
  
  defp parse_pair(pair),
    do:
      pair
      |> String.split(@pair_splitter)
      |> Enum.map(&String.to_integer(&1))

  defp build_lists([left_elem, right_elem], {left, right}),
    do: {[left_elem | left], [right_elem | right]}

  defp reverse_lists({left, right}),
    do: {Enum.reverse(left), Enum.reverse(right)}

  defp sort_lists({left, right}, dir),
    do: {Enum.sort(left, dir), Enum.sort(right, dir)}

  defp zip_lists({l, r}),
    do:
      Enum.zip(l, r)
      |> Enum.map(&Tuple.to_list/1)

  defp get_distances(pairs),
    do: Enum.map(pairs, &pair_distance/1)
  
  defp pair_distance([left, right]),
    do: abs(left - right)

  defp get_similarities({left, right}) do
    frequencies = Enum.frequencies(right)
    Enum.map(left, &get_value_similarity(&1, frequencies))
  end

  defp get_value_similarity(value, frequencies),
    do: value * (frequencies[value] || 0)
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day1, <<70, 79, 82, 49, 0, 0, 17, ...>>, {:get_value_similarity, 2}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_1_part_1_test_input = """
3   4
4   3
2   5
1   3
3   9
3   3
"""
day_1_part_1_test_answer = 11
day_1_part_1_test_output = Day1.get_distance(day_1_part_1_test_input)
day_1_part_1_test_output == day_1_part_1_test_answer
```

<!-- livebook:{"output":true} -->

```
true
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_1_part_1_puzzle_output = Day1.get_distance(day_1_part_1_puzzle_input)
```

<!-- livebook:{"output":true} -->

```
1879048
```

### Part 2

Your analysis only confirmed what everyone feared: the two lists of location IDs are indeed very different.

Or are they?

The Historians can't agree on which group made the mistakes or how to read most of the Chief's handwriting, but in the commotion you notice an interesting detail: a lot of location IDs appear in both lists! Maybe the other numbers aren't location IDs at all but rather misinterpreted handwriting.

This time, you'll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total **similarity score** by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.

Here are the same example lists again:

```
3   4
4   3
2   5
1   3
3   9
3   3
```

For these example lists, here is the process of finding the similarity score:

* The first number in the left list is `3`. It appears in the right list three times, so the similarity score increases by `3 * 3 = 9`.
* The second number in the left list is `4`. It appears in the right list once, so the similarity score increases by `4 * 1 = 4`.
* The third number in the left list is `2`. It does not appear in the right list, so the similarity score does not increase (`2 * 0 = 0`).
* The fourth number, `1`, also does not appear in the right list.
* The fifth number, `3`, appears in the right list three times; the similarity score increases by `9`.
* The last number, `3`, appears in the right list three times; the similarity score again increases by `9`.

So, for these example lists, the similarity score at the end of this process is `31` (`9 + 4 + 0 + 0 + 9 + 9`).

Once again consider your left and right lists. **What is their similarity score?**

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_1_part_2_test_answer = 31
day_1_part_2_test_output = Day1.get_similarity(day_1_part_1_test_input)
day_1_part_2_test_output == day_1_part_2_test_answer
```

<!-- livebook:{"output":true} -->

```
true
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_1_part_2_puzzle_output = Day1.get_similarity(day_1_part_1_puzzle_input)
```

<!-- livebook:{"output":true} -->

```
21024792
```

## Day 2

### Part 1: Red-Nosed Reports

Fortunately, the first location The Historians want to search isn't a long walk from the Chief Historian's office.

While the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.

They're quick to add that - since you're already here - they'd really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.

The unusual data (your puzzle input) consists of many **reports**, one report per line. Each report is a list of numbers called **levels** that are separated by spaces. For example:

```
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
```

This example data contains six reports each containing five levels.

The engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as **safe** if both of the following are true:

The levels are either **all increasing** or **all decreasing**.
Any two adjacent levels differ by **at least one** and **at most three**.
In the example above, the reports can be found safe or unsafe by checking those rules:

* `7 6 4 2 1`: **Safe** because the levels are all decreasing by `1` or `2`.
* `1 2 7 8 9`: **Unsafe** because `2` `7` is an increase of 5.
* `9 7 6 2 1`: **Unsafe** because `6` `2` is a decrease of `4`.
* `1 3 2 4 5`: **Unsafe** because `1` `3` is increasing but `3` `2` is decreasing.
* `8 6 4 4 1`: **Unsafe** because `4` `4` is neither an increase or a decrease.
* `1 3 6 7 9`: **Safe** because the levels are all increasing by `1`, `2`, or `3`.

So, in this example, `2` reports are **safe**.

Analyze the unusual data from the engineers. **How many reports are safe?**

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Day2 do
  @line_splitter "\n"
  @report_splitter " "
  @empty ""
  @safe "Safe"
  @unsafe "Unsafe"

  def get_safe_count(reports, dampen)
    when is_binary(reports) and is_boolean(dampen),
    do:
      reports
      |> get_safety_statum(dampen)
      |> Enum.filter(fn status -> status == @safe end)
      |> length()

  def get_safety_statum(reports, dampen)
    when is_binary(reports) and is_boolean(dampen),
    do:
      reports
      |> parse()
      |> Enum.map(&get_levels_safety(&1, dampen))

  def parse(reports)
    when is_binary(reports),
    do:
      reports
      |> String.split(@line_splitter)
      |> Enum.reject(&is_empty/1)
      |> Enum.map(&parse_report/1)

  defp is_empty(line),
    do: line == @empty

  defp parse_report(line),
    do:
      line
      |> String.split(@report_splitter)
      |> Enum.map(&String.to_integer/1)

  defp get_levels_safety(levels, dampen),
    do:
      levels
      |> Enum.chunk_every(2, 1, :discard)
      |> Enum.with_index()
      |> Enum.map(&evaluate_level_pair/1)
      |> determine_report_safety(dampen, levels)

  defp evaluate_level_pair({pair = [first, second], index}),
    do:
      {
        get_level_pair_direction(first, second),
        is_level_change_in_range(first, second),
        pair,
        index
      }

  defp get_level_pair_direction(first, second) do
    cond do
      first > second -> :decreasing
      first < second -> :increasing
      first == second -> :equal
    end
  end

  defp is_level_change_in_range(first, second),
    do: abs(first - second) in 1..3

  defp determine_report_safety(report, false, _levels) do
    directions = get_report_directions(report)
    ranges = get_report_ranges(report)
    {_direction, directions_result} =
      Enum.reduce(directions, {nil, nil}, &report_direction_reducer/2)
    
    if directions_result && Enum.all?(ranges) do
      @safe
    else
      @unsafe
    end
  end

  defp determine_report_safety(report, true, levels) do
    if determine_report_safety(report, false, levels) == @safe do
      @safe
    else
      out_of_range_positions =
        report
        |> Enum.map(fn {_dir, in_range, _pair, index} -> {in_range, index} end)
        |> Enum.filter(fn {in_range, _index} -> !in_range end)
        |> Enum.map(fn {_in_range, index} -> [index, index + 1] end)
        |> List.flatten()

      direction_frequencies = get_report_directions(report) |> Enum.frequencies()

      {main_direction, _count} =
        direction_frequencies
        |> Enum.max_by(fn {_direction, count} -> count end)

      other_directions =
        direction_frequencies
        |> Map.keys()
        |> Enum.reject(fn direction -> direction == main_direction end)

      wrong_direction_positions =
        report
        |> Enum.map(fn {direction, _in_range, _pair, index} -> {direction, index} end)
        |> Enum.filter(fn {direction, _index} -> direction in other_directions end)
        |> Enum.map(fn {_direction, index} -> [index, index + 1] end)
        |> List.flatten()

      test_positions =
        out_of_range_positions ++ wrong_direction_positions
        |> Enum.uniq()

      tests =
        test_positions
        |> Enum.map(fn position ->
          List.delete_at(levels, position) |> get_levels_safety(false)
        end)

      if Enum.any?(tests, fn result -> result == @safe end) do
        @safe
      else
        @unsafe
      end
    end
  end

  defp get_report_directions(report),
    do: report |> Enum.map(fn {dir, _in_range, _pair, _index} -> dir end)

  defp get_report_ranges(report),
    do: report |> Enum.map(fn {_dir, in_range, _pair, _index} -> in_range end)

  defp report_direction_reducer(direction, {nil, nil}),
    do: {direction, true}

  defp report_direction_reducer(current_direction, {first_direction, pass}),
    do: {first_direction, first_direction == current_direction && pass}
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day2, <<70, 79, 82, 49, 0, 0, 32, ...>>, {:report_direction_reducer, 2}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_2_part_1_test_input = """
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""
day_2_part_1_test_answer = 2
day_2_part_1_test_output = Day2.get_safe_count(day_2_part_1_test_input, false)
day_2_part_1_test_output == day_2_part_1_test_answer
```

<!-- livebook:{"output":true} -->

```
true
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_2_part_1_puzzle_output = Day2.get_safe_count(day_2_part_1_puzzle_input, false)
day_2_part_1_puzzle_output == 463
```

<!-- livebook:{"output":true} -->

```
true
```

### Part 2

The engineers are surprised by the low number of safe reports until they realize they forgot to tell you about the Problem Dampener.

The Problem Dampener is a reactor-mounted module that lets the reactor safety systems **tolerate a single bad level** in what would otherwise be a safe report. It's like the bad level never happened!

Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.

More of the above example's reports are now safe:

* `7 6 4 2 1`: Safe without removing any level.
* `1 2 7 8 9`: Unsafe regardless of which level is removed.
* `9 7 6 2 1`: Unsafe regardless of which level is removed.
* `1 3 2 4 5`: Safe by removing the second level, `3`.
* `8 6 4 4 1`: Safe by removing the third level, `4`.
* `1 3 6 7 9`: Safe without removing any level.

Thanks to the Problem Dampener, `4` reports are actually **safe**!

Update your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. **How many reports are now safe?**

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_2_part_2_test_answer = ["Safe", "Unsafe", "Unsafe", "Safe", "Safe", "Safe"]
day_2_part_2_test_answer_count = 4
day_2_part_2_test_output = Day2.get_safety_statum(day_2_part_1_test_input, true)
day_2_part_2_test_output_count = Day2.get_safe_count(day_2_part_1_test_input, true)

day_2_part_2_test_output_count == day_2_part_2_test_answer_count
  && day_2_part_2_test_answer == day_2_part_2_test_output
```

<!-- livebook:{"output":true} -->

```
true
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
day_2_part_2_puzzle_output = Day2.get_safe_count(day_2_part_1_puzzle_input, true)
```

<!-- livebook:{"output":true} -->

```
514
```
